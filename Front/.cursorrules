# Magic Pocket 前端插件代码风格指南

## 1. 文件结构与命名

### 1.1 文件命名
- 使用 camelCase 命名法
- 文件名应当表明其主要功能，如 `floatingWindow.js`
- 组件相关文件使用组件名命名

### 1.2 目录结构
```
Front/
  ├── src/
  │   ├── content/     # 内容脚本
  │   ├── background/  # 后台脚本
  │   ├── popup/       # 弹出窗口
  │   └── utils/       # 工具函数
  ├── styles/          # 样式文件
  └── lib/            # 第三方库
```

## 2. 代码组织

### 2.1 类的组织
- 使用 ES6 类语法
- 类名使用 PascalCase
- 构造函数在最前面
- 公共方法在前，私有方法在后
- 相关方法应该组织在一起

### 2.2 方法命名
- 初始化方法使用 `init` 前缀
- 设置方法使用 `setup` 前缀
- 创建元素方法使用 `create` 前缀
- 更新相关方法使用 `update` 前缀
- 事件处理方法使用 `handle` 前缀

## 3. 样式规范

### 3.1 样式定义
- 使用 Object.assign 进行样式设置
- 样式属性按照以下顺序排列:
  1. 定位属性 (position, top, right, z-index)
  2. 盒模型属性 (display, width, height, margin, padding)
  3. 视觉属性 (background, border, box-shadow)
  4. 文字属性 (font, color, text-align)
  5. 其他属性

### 3.2 类名命名
- 使用 kebab-case 命名法
- 组件前缀使用功能描述，如 `floating-window`
- 子元素使用父元素名称作为前缀

## 4. JavaScript 编码规范

### 4.1 变量声明
- 使用 const 声明不会重新赋值的变量
- 使用 let 声明会重新赋值的变量
- 避免使用 var

### 4.2 注释规范
- 类和主要方法需要添加描述性注释
- 复杂逻辑需要添加行内注释
- 使用中文注释说明主要功能
- 注释应该说明"为什么"而不是"是什么"

### 4.3 事件处理
- 使用箭头函数处理事件回调
- 事件监听器统一管理
- 及时移除不需要的事件监听器

## 5. 设计模式

### 5.1 组件设计
- 采用单一职责原则
- 组件应该是独立和可复用的
- 使用组合优于继承

### 5.2 状态管理
- 使用 chrome.storage 进行状态持久化
- 本地状态使用类属性管理
- 状态更新后需要触发相应的视图更新

## 6. 错误处理

### 6.1 异步操作
- 使用 async/await 处理异步操作
- 对 Promise 进行适当的错误捕获
- 异步操作要考虑加载状态的处理

### 6.2 错误日志
- 使用 console.log 输出关键信息
- 使用 console.error 输出错误信息
- 在生产环境中要适当处理错误信息

## 7. 性能考虑

### 7.1 DOM 操作
- 批量进行 DOM 操作
- 使用 DocumentFragment 优化多个元素的添加
- 注意防抖和节流的使用

### 7.2 资源加载
- 懒加载非必要的资源
- 合理使用缓存机制

## 8. UI 设计风格
### 8.1 设计语言
#### 8.1.1 整体风格
- 采用现代简约设计
- 强调清晰的视觉层次
- 使用柔和的阴影和过渡效果
- 注重交互的流畅性和反馈

参考实现：

```163:176:Front/src/content/floatingWindow.js
    setupContainerStyle(container) {
        Object.assign(container.style, {
            position: "relative",
            width: "100%",
            height: this.config.height,
     
            boxShadow: "0 4px 20px rgba(0, 0, 0, 0.1)",
            overflow: "hidden",
            transition: "all 0.3s ease",
            marginBottom: "12px",
            border: "1px solid rgba(226, 232, 240, 0.8)"
        });
    }
```


#### 8.1.2 色彩系统

##### 主色调
- 背景色：`#ffffff`（纯白）
- 次要背景：`#f8f9fa`（浅灰）
- 边框色：`#edf2f7`（淡灰）
- 文字主色：`#2d3748`（深灰）
- 文字次色：`#718096`（中灰）

##### 功能色

```402:420:Front/src/content/floatingWindow.js
f
        clearAllBtn: "#FEE2E2",
        startGenerateBtn: "#E6FFFA",
        showIntentBtn: "#EBF4FF",
        showNetworkBtn: "#F0FFF4"
    };
    return colors[id] || "#EDF2F7";
}

function getButtonTextColor(id) {
    const colors = {
        clearAllBtn: "#E53E3E",
        startGenerateBtn: "#319795",
        showIntentBtn: "#3182CE",
        showNetworkBtn: "#38A169"
    };
    return colors[id] || "#4A5568";
}
```


#### 8.1.3 圆角规范
- 大圆角：`16px`（容器、卡片）
- 中圆角：`12px`（按钮组）
- 小圆角：`8px`（按钮、输入框）
- 特殊圆角：`50%`（浮动按钮）

### 8.2. 组件设计

#### 8.2.1 卡片组件
- 白色背景
- 轻微阴影
- 悬停效果
- 内容边距：`16px`

参考实现：

```77:92:Front/styles/styles.css
.record-item {
    margin-bottom: 15px;
    padding: 12px;
    border: none;
    border-radius: 10px;
    background-color: #ffffff;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    transition: all 0.2s ease;
    cursor: pointer;
    padding: 15px;
}

.record-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}
```


#### 8.2.2 按钮样式

##### 主要按钮
- 填充背景色
- 无边框
- 过渡动画
- 悬停效果包括：
  - 亮度变化
  - 轻微上移
  - 阴影加深

参考实现：

```
372:400:Front/src/content/floatingWindow.js
function createButton(text, id) {
    const button = document.createElement("button");
    button.id = id;
    button.textContent = text;
    Object.assign(button.style, {
        padding: "8px 12px",
        borderRadius: "8px",
        border: "none",
        fontSize: "13px",
        fontWeight: "500",
        cursor: "pointer",
        transition: "all 0.2s ease",
        backgroundColor: getButtonColor(id),
        color: getButtonTextColor(id)
    });

    // 添加悬停效果
    button.addEventListener("mouseover", () => {
        button.style.filter = "brightness(0.95)";
        button.style.transform = "translateY(-1px)";
    });

    button.addEventListener("mouseout", () => {
        button.style.filter = "none";
        button.style.transform = "translateY(0)";
    });

    return button;
}
```


#### 2.3 图标设计
- 使用统一的 SVG 图标
- 图标大小：`16px` 或 `24px`
- 线条粗细：`2px`
- 颜色继承父元素

参考实现：

```
258:263:Front/src/content/floatingWindow.js
        // 创建SVG图标
        button.innerHTML = `
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M8 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h3M21 12H8M21 12L15 6M21 12l-6 6"/>
            </svg>
        `;
```
### 8.3. 交互设计

#### 8.3.1 动画效果
- 所有过渡动画时长：`0.2s` 或 `0.3s`
- 使用 `ease` 缓动函数
- 常用动画属性：
  - transform
  - opacity
  - background-color
  - box-shadow

#### 8.3.2 悬停状态
- 轻微放大或上移
- 阴影加深
- 背景色变化
- 图标颜色加深

参考实现：

```
89:92:Front/styles/styles.css
.record-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}
```


#### 8.3.3 滚动条样式
- 宽度：`6px`
- 圆角：`3px`
- 背景色透明
- 滑块颜色：`#CBD5E0`
- 悬停色：`#A0AEC0`

参考实现：

```
731:746:Front/src/content/floatingWindow.js
    .floating-container-area::-webkit-scrollbar {
        width: 6px;
    }

    .floating-container-area::-webkit-scrollbar-track {
        background: transparent;
    }

    .floating-container-area::-webkit-scrollbar-thumb {
        background-color: #CBD5E0;
        border-radius: 3px;
    }

    .floating-container-area::-webkit-scrollbar-thumb:hover {
        background-color: #A0AEC0;
    }
```


### 8.4. 响应式设计

#### 8.4.1 断点设置
- 移动端：`< 768px`
- 平板：`768px - 1024px`
- 桌面：`> 1024px`

#### 8.4.2 容器适配
- 使用相对单位：`vw`、`vh`
- 最小宽度保护
- 内容边距自适应

参考实现：

```
719:724:Front/src/content/floatingWindow.js
    @media screen and (max-width: 768px) {
        .floating-container-area {
            width: 90vw;
            minWidth: 320px;
        }
    }
```


### 8.5. 可访问性

#### 8.5.1 文字排版
- 主要文字：`14px`
- 标题文字：`16px`
- 辅助文字：`12px`
- 行高：`1.5`
- 字重：
  - 常规：`400`
  - 中等：`500`
  - 加粗：`600`

#### 8.5.2 对比度
- 确保文字与背景的对比度符合 WCAG 2.0 标准
- 使用语义化的颜色命名
- 提供充分的视觉反馈
